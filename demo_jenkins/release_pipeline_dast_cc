pipeline {
	agent any
	environment {
		galloper_auth = credentials("galloper-auth")
		redis_pwd = credentials("redis-password")
		galloper = credentials("galloper-url")

	}
	stages {
		stage('Deploying Project') {
			steps {
				sh "mkdir reports || echo 'Ok'"
				echo "Project deployed"
			}
		}
		stage('Smoke tests') {
			steps {
				echo "Assume it is fine"
			}
		}
		stage('Tests') {
			parallel {
				stage('Regression') {
					steps {
						echo "Assuming good"
					}
				}
				stage('Performance') {
					steps {
						script {
							def dockerParamsString = "--entrypoint=''"
							def params = [
								"-t",
								"-e REDIS_HOST=$galloper",
								"-e REDIS_PASSWORD=$redis_pwd",
								"-e loki_host=http://$galloper",
								"-e loki_port=3100",
								"-e galloper_url=http://$galloper_auth@$galloper",
								"-e bucket=tests",
								"-e artifact=Archive.zip",
								"-e GALLOPER_WEB_HOOK=http://$galloper_auth@$galloper/task/7358d174-aa0b-40fb-a229-24c60aa17700"
							]
							for (param in params) {
								dockerParamsString += " ${param}"
							}
								docker.image("getcarrier/control_tower:latest").inside(dockerParamsString){
									echo "Starting job"
									sh """run -c getcarrier/perfmeter:latest \\
									   -e '{\"cmd\": \"-n -t /mnt/jmeter/FloodIO.jmx -Jtest.type=debug -Jenv.type=debug -Jinflux.host=$galloper -JVUSERS=5 -JDURATION=30 -JRAMP_UP=10 -Jtest_name=Flood\"}' \\
									   -t perfmeter -n DemoTest -q 2 -j True -qg True -p $WORKSPACE/reports"""
								}
						    }
					}
				}
				stage('DAST') {
					steps {
						echo "Assuming good"
					}
				}
			}
		}
		stage('Promote Build') {
			steps {
                echo "assuming good here"
			}
		}
	}
	post {
		always {
			junit 'reports/*.xml'
			cleanWs()
		}
	}
}